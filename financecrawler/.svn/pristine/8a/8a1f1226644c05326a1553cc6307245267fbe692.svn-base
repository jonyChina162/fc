package cn.whu.zl.hbase.dao;

import static cn.whu.zl.util.MD5Util.str2MD516;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.hadoop.hbase.client.Delete;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HTableInterface;
import org.apache.hadoop.hbase.client.HTablePool;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.log4j.Logger;

import cn.whu.zl.hbase.model.HbIndusReports;

public class IndusReportDAO {

	public static final byte[] TABLE_NAME = Bytes.toBytes("irps");
	public static final byte[] INFO_FAM = Bytes.toBytes("if");
	public static final byte[] CONTENT_FAM = Bytes.toBytes("ct");
	public static final byte[] IDICATOR_FAM = Bytes.toBytes("idc");

	public static final byte[] ORGNAME_COL = Bytes.toBytes("oname");
	public static final byte[] INDUSNAME_COL = Bytes.toBytes("iname");
	public static final byte[] PCR_COL = Bytes.toBytes("pcr");
	public static final byte[] CONTENT_COL = Bytes.toBytes("rc");
	public static final byte[] NUM_COL = Bytes.toBytes("num");
	public static final byte[] TITLE_COL = Bytes.toBytes("title");

	private static final Logger log = Logger.getLogger(IndusReportDAO.class);

	private HTablePool pool;
	private HTableInterface t;

	public IndusReportDAO(HTablePool pool) {
		this.pool = pool;
		this.t = pool.getTable(TABLE_NAME);
	}

	public void close() {
		try {
			pool.closeTablePool(TABLE_NAME);
		} catch (IOException ioe) {
			log.error(ioe);
		}
	}

	private static Get mkGet(String id) throws IOException {
		log.debug(String.format("Creating Get for %s", id));

		Get g = new Get(Bytes.toBytes(id));

		return g;
	}

	public List<HbIndusReports> scanByTime(String time) throws IOException {
		Scan s = new Scan();
		s.addFamily(INFO_FAM);
		String end = String.valueOf(Integer.parseInt(time) + 1);
		s.setStartRow(Bytes.toBytes(time));
		s.setStopRow(Bytes.toBytes(end));
		ResultScanner rs = t.getScanner(s);
		List<HbIndusReports> list = new ArrayList<HbIndusReports>();
		for (Result r : rs) {
			String key = Bytes.toString(r.getRow());
			String[] keyTmp = key.split("_");
			HbIndusReports hbir = new HbIndusReports();
			hbir.time = keyTmp[0];
			hbir.grade = Integer.parseInt(keyTmp[1]);
			hbir.graChange = Integer.parseInt(keyTmp[2]);
			hbir.orgImpact = Integer.parseInt(keyTmp[3]);
			hbir.url = keyTmp[4];
			hbir.indusName = Bytes
					.toString(r.getValue(INFO_FAM, INDUSNAME_COL));
			hbir.orgName = Bytes.toString(r.getValue(INFO_FAM, ORGNAME_COL));
			hbir.priceCR = Bytes.toString(r.getValue(INFO_FAM, PCR_COL));
			hbir.title = Bytes.toString(r.getValue(INFO_FAM, TITLE_COL));
			list.add(hbir);
		}
		return list;
	}

	public List<HbIndusReports> scanByNTime(String time, int N)
			throws Exception {
		Scan s = new Scan();
		s.addFamily(INFO_FAM);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd"); 
		Calendar c = Calendar.getInstance();
		c.setTime(sdf.parse(time));
		c.add(Calendar.DAY_OF_YEAR, -1 * N);
		String begin = sdf.format(c.getTime());
		c.add(Calendar.DAY_OF_YEAR, N + 1);
		String end = sdf.format(c.getTime());
		s.setStartRow(Bytes.toBytes(begin));
		s.setStopRow(Bytes.toBytes(end));
		ResultScanner rs = t.getScanner(s);
		List<HbIndusReports> list = new ArrayList<HbIndusReports>();
		for (Result r : rs) {
			String key = Bytes.toString(r.getRow());
			String[] keyTmp = key.split("_");
			HbIndusReports hbir = new HbIndusReports();
			hbir.time = keyTmp[0];
			hbir.grade = Integer.parseInt(keyTmp[1]);
			hbir.graChange = Integer.parseInt(keyTmp[2]);
			hbir.orgImpact = Integer.parseInt(keyTmp[3]);
			hbir.url = keyTmp[4];
			hbir.indusName = Bytes
					.toString(r.getValue(INFO_FAM, INDUSNAME_COL));
			hbir.orgName = Bytes.toString(r.getValue(INFO_FAM, ORGNAME_COL));
			hbir.priceCR = Bytes.toString(r.getValue(INFO_FAM, PCR_COL));
			hbir.title = Bytes.toString(r.getValue(INFO_FAM, TITLE_COL));
			list.add(hbir);
		}
		return list;
	}

	private static Put mkPut(HbIndusReports ir) {
		log.debug(String.format("Creating Put for %s", ir));

		StringBuilder sb = new StringBuilder(37);
		sb.append(ir.time).append("_").append(ir.grade).append("_")
				.append(ir.graChange).append("_").append(ir.orgImpact)
				.append("_");
		sb.append(str2MD516(ir.url));

		String key = sb.toString();

		Put p = new Put(Bytes.toBytes(key));
		p.add(INFO_FAM, ORGNAME_COL, Bytes.toBytes(ir.orgImpact));
		p.add(INFO_FAM, INDUSNAME_COL, Bytes.toBytes(ir.indusName));
		p.add(INFO_FAM, PCR_COL, Bytes.toBytes(ir.priceCR));
		p.add(INFO_FAM, TITLE_COL, Bytes.toBytes(ir.title));

		p.add(CONTENT_FAM, CONTENT_COL, Bytes.toBytes(ir.reContent));
		ir.setKey(key);
		return p;
	}

	public static Put mkPut(String time, int grade, int graChange,
			int orgImpact, String url, String fam, String qual, String val) {
		StringBuilder sb = new StringBuilder(37);
		sb.append(time).append("_").append(grade).append("_").append(graChange)
				.append("_").append(orgImpact).append("_");
		sb.append(str2MD516(url));
		return mkPut(sb.toString(), Bytes.toBytes(fam), Bytes.toBytes(qual),
				Bytes.toBytes(val));
	}

	public static Put mkPut(String key, byte[] fam, byte[] qual, byte[] val) {
		Put p = new Put(Bytes.toBytes(key));
		p.add(fam, qual, val);
		return p;
	}

	private static Delete mkDel(String ir) {
		log.debug(String.format("Creating Delete for %s", ir));

		Delete d = new Delete(Bytes.toBytes(ir));
		return d;
	}

	private static Scan mkScan() {
		Scan s = new Scan();
		return s;
	}

	private static Scan infoScan() {
		Scan s = new Scan();
		s.addFamily(INFO_FAM);
		return s;
	}

	public void add(String time, int grade, int graChange, int orgImpact,
			String url, byte[] oname, byte[] iname, byte[] pcr, byte[] rc,
			byte[] title) throws IOException {

		StringBuilder sb = new StringBuilder(37);
		sb.append(time).append("_").append(grade).append("_").append(graChange)
				.append("_").append(orgImpact).append("_");
		sb.append(str2MD516(url));

		String key = sb.toString();

		Put p = mkPut(key, INFO_FAM, ORGNAME_COL, oname);
		p.add(INFO_FAM, INDUSNAME_COL, iname);
		p.add(INFO_FAM, PCR_COL, pcr);
		p.add(INFO_FAM, TITLE_COL, title);
		p.add(CONTENT_FAM, CONTENT_COL, rc);
		t.put(p);

		incReportsCount(key);
	}

	public void add(HbIndusReports ir) throws IOException {
		Put p = mkPut(ir);
		t.put(p);
		incReportsCount(ir.getKey());
	}

	public void add(String time, int grade, int graChange, int orgImpact,
			String url, byte[] fam, byte[] qual, byte[] val) throws IOException {

		StringBuilder sb = new StringBuilder(37);
		sb.append(time).append("_").append(grade).append("_").append(graChange)
				.append("_").append(orgImpact).append("_");
		sb.append(str2MD516(url));

		String key = sb.toString();

		Put p = mkPut(sb.toString(), fam, qual, val);
		t.put(p);

		incReportsCount(key);
	}

	public HbIndusReports get(String key) throws IOException {
		Get g = mkGet(key);
		Result result = t.get(g);
		if (result.isEmpty()) {
			log.info(String.format("indusReport %s not found.", key));
			return null;
		}

		HbIndusReports irs = new HbIndusReports(key);
		return irs;
	}

	public void delete(String key) throws IOException {
		Delete d = mkDel(key);
		t.delete(d);
	}

	public List<HbIndusReports> getAll() throws IOException {
		ResultScanner results = t.getScanner(mkScan());
		ArrayList<HbIndusReports> ret = new ArrayList<HbIndusReports>();
		// TODO
		for (Result r : results) {
			ret.add(null);
		}

		return ret;
	}

	public List<HbIndusReports> getInfoList() throws IOException {
		ResultScanner results = t.getScanner(infoScan());
		ArrayList<HbIndusReports> ret = new ArrayList<HbIndusReports>();
		// TODO
		for (Result r : results) {
			ret.add(null);
		}

		return ret;
	}

	public long incReportsCount(String key) throws IOException {
		long ret = t.incrementColumnValue(Bytes.toBytes(key), INFO_FAM,
				NUM_COL, 1L);

		return ret;
	}
}
